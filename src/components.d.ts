/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppDummy {
    }
    interface DonutProgress {
        "completedSteps": number;
        "desktopSize": number;
        "mobileSize": number;
        "percent": number;
        "steps": number;
    }
    interface DonutProgressLoader {
        /**
          * Size of the progress loader in pixels.
         */
        "donutSize": number;
        /**
          * Completion percentage of the progress loader (0-100).
         */
        "percent": number;
    }
    interface ImageUploader {
        "errorMessage": string;
        "height": number;
        "loading": boolean;
        "successIconHeight": number;
        "uploadLabel": string;
        "uploadSuccess": boolean;
        "width": number;
    }
    interface ImageUploaderWrapper {
    }
}
export interface ImageUploaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLImageUploaderElement;
}
declare global {
    interface HTMLAppDummyElement extends Components.AppDummy, HTMLStencilElement {
    }
    var HTMLAppDummyElement: {
        prototype: HTMLAppDummyElement;
        new (): HTMLAppDummyElement;
    };
    interface HTMLDonutProgressElement extends Components.DonutProgress, HTMLStencilElement {
    }
    var HTMLDonutProgressElement: {
        prototype: HTMLDonutProgressElement;
        new (): HTMLDonutProgressElement;
    };
    interface HTMLDonutProgressLoaderElement extends Components.DonutProgressLoader, HTMLStencilElement {
    }
    var HTMLDonutProgressLoaderElement: {
        prototype: HTMLDonutProgressLoaderElement;
        new (): HTMLDonutProgressLoaderElement;
    };
    interface HTMLImageUploaderElementEventMap {
        "imageSelected": File;
    }
    interface HTMLImageUploaderElement extends Components.ImageUploader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLImageUploaderElementEventMap>(type: K, listener: (this: HTMLImageUploaderElement, ev: ImageUploaderCustomEvent<HTMLImageUploaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLImageUploaderElementEventMap>(type: K, listener: (this: HTMLImageUploaderElement, ev: ImageUploaderCustomEvent<HTMLImageUploaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLImageUploaderElement: {
        prototype: HTMLImageUploaderElement;
        new (): HTMLImageUploaderElement;
    };
    interface HTMLImageUploaderWrapperElement extends Components.ImageUploaderWrapper, HTMLStencilElement {
    }
    var HTMLImageUploaderWrapperElement: {
        prototype: HTMLImageUploaderWrapperElement;
        new (): HTMLImageUploaderWrapperElement;
    };
    interface HTMLElementTagNameMap {
        "app-dummy": HTMLAppDummyElement;
        "donut-progress": HTMLDonutProgressElement;
        "donut-progress-loader": HTMLDonutProgressLoaderElement;
        "image-uploader": HTMLImageUploaderElement;
        "image-uploader-wrapper": HTMLImageUploaderWrapperElement;
    }
}
declare namespace LocalJSX {
    interface AppDummy {
    }
    interface DonutProgress {
        "completedSteps"?: number;
        "desktopSize"?: number;
        "mobileSize"?: number;
        "percent"?: number;
        "steps"?: number;
    }
    interface DonutProgressLoader {
        /**
          * Size of the progress loader in pixels.
         */
        "donutSize"?: number;
        /**
          * Completion percentage of the progress loader (0-100).
         */
        "percent"?: number;
    }
    interface ImageUploader {
        "errorMessage"?: string;
        "height"?: number;
        "loading"?: boolean;
        "onImageSelected"?: (event: ImageUploaderCustomEvent<File>) => void;
        "successIconHeight"?: number;
        "uploadLabel"?: string;
        "uploadSuccess"?: boolean;
        "width"?: number;
    }
    interface ImageUploaderWrapper {
    }
    interface IntrinsicElements {
        "app-dummy": AppDummy;
        "donut-progress": DonutProgress;
        "donut-progress-loader": DonutProgressLoader;
        "image-uploader": ImageUploader;
        "image-uploader-wrapper": ImageUploaderWrapper;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-dummy": LocalJSX.AppDummy & JSXBase.HTMLAttributes<HTMLAppDummyElement>;
            "donut-progress": LocalJSX.DonutProgress & JSXBase.HTMLAttributes<HTMLDonutProgressElement>;
            "donut-progress-loader": LocalJSX.DonutProgressLoader & JSXBase.HTMLAttributes<HTMLDonutProgressLoaderElement>;
            "image-uploader": LocalJSX.ImageUploader & JSXBase.HTMLAttributes<HTMLImageUploaderElement>;
            "image-uploader-wrapper": LocalJSX.ImageUploaderWrapper & JSXBase.HTMLAttributes<HTMLImageUploaderWrapperElement>;
        }
    }
}
